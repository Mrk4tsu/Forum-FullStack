// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using MrKatsuWebAPI.DataAccess;

#nullable disable

namespace MrKatsuWebAPI.DataAccess.Migrations
{
    [DbContext(typeof(AppDbContext))]
    partial class AppDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.15")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            MySqlModelBuilderExtensions.AutoIncrementColumns(modelBuilder);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("longtext");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("longtext");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("role_claims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("longtext");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("longtext");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("user_claims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<int>", b =>
                {
                    b.Property<int>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("UserId"));

                    b.Property<string>("LoginProvider")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("longtext");

                    b.Property<string>("ProviderKey")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("UserId");

                    b.ToTable("user_logins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<int>", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.HasKey("UserId", "RoleId");

                    b.ToTable("user_roles", (string)null);

                    b.HasData(
                        new
                        {
                            UserId = 1,
                            RoleId = 1
                        },
                        new
                        {
                            UserId = 2,
                            RoleId = 1
                        },
                        new
                        {
                            UserId = 3,
                            RoleId = 1
                        },
                        new
                        {
                            UserId = 4,
                            RoleId = 1
                        },
                        new
                        {
                            UserId = 5,
                            RoleId = 1
                        },
                        new
                        {
                            UserId = 6,
                            RoleId = 1
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<int>", b =>
                {
                    b.Property<int>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("UserId"));

                    b.Property<string>("LoginProvider")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Value")
                        .HasColumnType("longtext");

                    b.HasKey("UserId");

                    b.ToTable("user_tokens", (string)null);
                });

            modelBuilder.Entity("MrKatsuWebAPI.DataAccess.Entities.AppRole", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ConcurrencyStamp")
                        .HasColumnType("varchar(255)")
                        .HasColumnName("concurrency_stamp");

                    b.Property<string>("Description")
                        .HasColumnType("longtext")
                        .HasColumnName("description");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(255)")
                        .HasColumnName("name");

                    b.Property<string>("NormalizedName")
                        .IsRequired()
                        .HasColumnType("varchar(255)")
                        .HasColumnName("normalized_name");

                    b.HasKey("Id");

                    b.HasIndex("ConcurrencyStamp")
                        .HasDatabaseName("IX_Roles_ConcurrencyStamp");

                    b.HasIndex("Name")
                        .IsUnique()
                        .HasDatabaseName("IX_Roles_Name");

                    b.HasIndex("NormalizedName")
                        .HasDatabaseName("IX_Roles_NormalizedName");

                    b.ToTable("roles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Description = "Admintrator",
                            Name = "Admin",
                            NormalizedName = "ADMIN"
                        },
                        new
                        {
                            Id = 2,
                            Description = "Admintrator",
                            Name = "User",
                            NormalizedName = "USER"
                        });
                });

            modelBuilder.Entity("MrKatsuWebAPI.DataAccess.Entities.AppUser", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AccessFailedCount")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(0)
                        .HasColumnName("access_failed_count");

                    b.Property<string>("Avatar")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("longtext")
                        .HasDefaultValue("")
                        .HasColumnName("avatar");

                    b.Property<string>("ConcurrencyStamp")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("longtext")
                        .HasDefaultValue("")
                        .HasColumnName("concurrency_stamp");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("email");

                    b.Property<bool>("EmailConfirmed")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint(1)")
                        .HasDefaultValue(false)
                        .HasColumnName("email_confirmed");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint(1)")
                        .HasDefaultValue(false)
                        .HasColumnName("is_deleted");

                    b.Property<bool>("LockoutEnabled")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint(1)")
                        .HasDefaultValue(false)
                        .HasColumnName("lockout_enabled");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("lockout_end");

                    b.Property<string>("NormalizedEmail")
                        .HasColumnType("longtext")
                        .HasColumnName("normalized_email");

                    b.Property<string>("NormalizedUserName")
                        .HasColumnType("longtext")
                        .HasColumnName("normalized_username");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("password_hash");

                    b.Property<string>("PhoneNumber")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("longtext")
                        .HasDefaultValue("")
                        .HasColumnName("phone_number");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint(1)")
                        .HasDefaultValue(false)
                        .HasColumnName("phone_number_confirmed");

                    b.Property<string>("SecurityStamp")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("longtext")
                        .HasDefaultValue("")
                        .HasColumnName("security_stamp");

                    b.Property<DateTime>("TimeCreated")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("time_created");

                    b.Property<DateTime>("TimeUpdated")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("time_updated");

                    b.Property<bool>("TwoFactorEnabled")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint(1)")
                        .HasDefaultValue(false)
                        .HasColumnName("two_factor_enabled");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasColumnType("varchar(255)")
                        .HasColumnName("username");

                    b.HasKey("Id");

                    b.HasIndex("UserName")
                        .IsUnique()
                        .HasDatabaseName("IX_Users_UserName");

                    b.ToTable("users", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AccessFailedCount = 0,
                            Avatar = "assets/images/avatars/564.png",
                            ConcurrencyStamp = "4704099e-05ec-4dd1-a3f3-3990a84e1e62",
                            Email = "admin@mail.com",
                            EmailConfirmed = false,
                            IsDeleted = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "ADMIN@EMAIL.COM",
                            NormalizedUserName = "ADMIN",
                            PasswordHash = "AQAAAAIAAYagAAAAEH8+yp8aKzUu09WulKDOgPR9UIuj2cY5LLmv7w/AXLVbDYBC3dz3NlDL+ir/LM+vlg==",
                            PhoneNumberConfirmed = false,
                            TimeCreated = new DateTime(2025, 5, 1, 23, 21, 30, 511, DateTimeKind.Local).AddTicks(3538),
                            TimeUpdated = new DateTime(2025, 5, 1, 23, 21, 30, 511, DateTimeKind.Local).AddTicks(3539),
                            TwoFactorEnabled = false,
                            UserName = "admin"
                        },
                        new
                        {
                            Id = 2,
                            AccessFailedCount = 0,
                            Avatar = "assets/images/avatars/vip/1475.png",
                            ConcurrencyStamp = "a6d22d16-f47b-48f8-8a6b-5655064e3511",
                            Email = "hunghero@mail.com",
                            EmailConfirmed = false,
                            IsDeleted = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "HUNGHERO@MAIL.COM",
                            NormalizedUserName = "HUNGHERO",
                            PasswordHash = "AQAAAAIAAYagAAAAEJY0sJXsd5ZrQNQOzZZMckv/mOhceKcrQvpXX/+/5b3PK/EKVZ6/jQWetXLbuf3qEQ==",
                            PhoneNumberConfirmed = false,
                            TimeCreated = new DateTime(2025, 5, 1, 23, 21, 30, 596, DateTimeKind.Local).AddTicks(9763),
                            TimeUpdated = new DateTime(2025, 5, 1, 23, 21, 30, 596, DateTimeKind.Local).AddTicks(9764),
                            TwoFactorEnabled = false,
                            UserName = "hunghero"
                        },
                        new
                        {
                            Id = 3,
                            AccessFailedCount = 0,
                            Avatar = "assets/images/avatars/vip/1360.png",
                            ConcurrencyStamp = "68e2c868-df11-43ed-8b17-d608da4c6573",
                            Email = "katsu@mail.com",
                            EmailConfirmed = false,
                            IsDeleted = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "KATSU@MAIL.COM",
                            NormalizedUserName = "KATSU",
                            PasswordHash = "AQAAAAIAAYagAAAAEBUHSaD+UzuSm5N2ZpioscoTjxhiWFJUg61/4pkb+6FE+OOTyjcYJXfJZr5/cJDN3g==",
                            PhoneNumberConfirmed = false,
                            TimeCreated = new DateTime(2025, 5, 1, 23, 21, 30, 762, DateTimeKind.Local).AddTicks(4702),
                            TimeUpdated = new DateTime(2025, 5, 1, 23, 21, 30, 762, DateTimeKind.Local).AddTicks(4716),
                            TwoFactorEnabled = false,
                            UserName = "katsu"
                        },
                        new
                        {
                            Id = 4,
                            AccessFailedCount = 0,
                            Avatar = "assets/images/avatars/vip/1361.png",
                            ConcurrencyStamp = "9973f087-e8d3-4d0d-b02b-d0608e41d0be",
                            Email = "gatapchoi@email.com",
                            EmailConfirmed = false,
                            IsDeleted = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "GATAPCHOI@EMAIL.COM",
                            NormalizedUserName = "GATAPCHOI",
                            PasswordHash = "AQAAAAIAAYagAAAAEDLxy7ngfPlyWTOIdF5ECwOR/bTDe+t61OdxOqMewJUqjKLRmSpWb6KlbZtSyL6zLA==",
                            PhoneNumberConfirmed = false,
                            TimeCreated = new DateTime(2025, 5, 1, 23, 21, 30, 848, DateTimeKind.Local).AddTicks(1313),
                            TimeUpdated = new DateTime(2025, 5, 1, 23, 21, 30, 848, DateTimeKind.Local).AddTicks(1346),
                            TwoFactorEnabled = false,
                            UserName = "gatapchoi"
                        },
                        new
                        {
                            Id = 5,
                            AccessFailedCount = 0,
                            Avatar = "assets/images/avatars/vip/1474.png",
                            ConcurrencyStamp = "c3023fa2-75f7-4892-ad80-f62880b6cc48",
                            Email = "manhhdc@email.com",
                            EmailConfirmed = false,
                            IsDeleted = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "MANHHDC@EMAIL.COM",
                            NormalizedUserName = "MANHHDC",
                            PasswordHash = "AQAAAAIAAYagAAAAEHJG0c85A85CAm+p7NOlwLp8wueVgqlos16Xlkg73fF74rSub+nZsQ/PlDkdPDy76g==",
                            PhoneNumberConfirmed = false,
                            TimeCreated = new DateTime(2025, 5, 1, 23, 21, 30, 934, DateTimeKind.Local).AddTicks(3773),
                            TimeUpdated = new DateTime(2025, 5, 1, 23, 21, 30, 934, DateTimeKind.Local).AddTicks(3788),
                            TwoFactorEnabled = false,
                            UserName = "manhhdc"
                        },
                        new
                        {
                            Id = 6,
                            AccessFailedCount = 0,
                            Avatar = "assets/images/avatars/1209.png",
                            ConcurrencyStamp = "45ef2b56-603f-4110-b343-ce55df1d92a1",
                            Email = "ehvn@email.com",
                            EmailConfirmed = false,
                            IsDeleted = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "ehvn@email.com",
                            NormalizedUserName = "EHVN",
                            PasswordHash = "AQAAAAIAAYagAAAAEEX+UQXBrBqN988cZ+tKdYIvtZywThdM0caGQmRP9dy3qrLNaso865kC8IOCMx8S+w==",
                            PhoneNumberConfirmed = false,
                            TimeCreated = new DateTime(2025, 5, 1, 23, 21, 31, 23, DateTimeKind.Local).AddTicks(6661),
                            TimeUpdated = new DateTime(2025, 5, 1, 23, 21, 31, 23, DateTimeKind.Local).AddTicks(6674),
                            TwoFactorEnabled = false,
                            UserName = "ehvn"
                        },
                        new
                        {
                            Id = 13,
                            AccessFailedCount = 0,
                            Avatar = "assets/images/avatars/vip/1360.png",
                            ConcurrencyStamp = "263da7d7-f262-4cb9-8693-bf0eb5c27aee",
                            Email = "tanhieuno4@mail.com",
                            EmailConfirmed = false,
                            IsDeleted = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "TANHIEUNO4@EMAIL.COM",
                            NormalizedUserName = "TANHIEUNO4",
                            PasswordHash = "AQAAAAIAAYagAAAAEKvFX9FSESLiWXuYCxuT+mhJyIFitWQAIQeK+aI3cKIyiioO9hZEuAujgr9gjcVcOg==",
                            PhoneNumberConfirmed = false,
                            TimeCreated = new DateTime(2025, 5, 1, 23, 21, 31, 23, DateTimeKind.Local).AddTicks(6740),
                            TimeUpdated = new DateTime(2025, 5, 1, 23, 21, 31, 23, DateTimeKind.Local).AddTicks(6741),
                            TwoFactorEnabled = false,
                            UserName = "tanhieuno4"
                        });
                });

            modelBuilder.Entity("MrKatsuWebAPI.DataAccess.Entities.Category", b =>
                {
                    b.Property<byte>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint unsigned")
                        .HasColumnName("id");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<byte>("Id"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("varchar(150)")
                        .HasColumnName("description");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("name");

                    b.HasKey("Id");

                    b.ToTable("categories", (string)null);

                    b.HasData(
                        new
                        {
                            Id = (byte)1,
                            Description = "Chi tiết danh mục",
                            Name = "android"
                        },
                        new
                        {
                            Id = (byte)2,
                            Description = "Chi tiết danh mục",
                            Name = "pc"
                        },
                        new
                        {
                            Id = (byte)3,
                            Description = "Chi tiết danh mục",
                            Name = "java"
                        },
                        new
                        {
                            Id = (byte)4,
                            Description = "Chi tiết danh mục",
                            Name = "ios"
                        });
                });

            modelBuilder.Entity("MrKatsuWebAPI.DataAccess.Entities.Mod", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<byte>("CategoryId")
                        .HasColumnType("tinyint unsigned")
                        .HasColumnName("category_id");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime(6)")
                        .HasDefaultValue(new DateTime(2025, 5, 1, 16, 21, 30, 504, DateTimeKind.Utc).AddTicks(8078))
                        .HasColumnName("created_at");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("description");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint(1)")
                        .HasDefaultValue(false)
                        .HasColumnName("is_deleted");

                    b.Property<bool>("IsPrivate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint(1)")
                        .HasDefaultValue(false)
                        .HasColumnName("is_private");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("name");

                    b.Property<DateTime>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime(6)")
                        .HasDefaultValue(new DateTime(2025, 5, 1, 16, 21, 30, 504, DateTimeKind.Utc).AddTicks(9373))
                        .HasColumnName("updated_at");

                    b.Property<int>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("user_id");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.HasIndex("UserId");

                    b.ToTable("mods", (string)null);
                });

            modelBuilder.Entity("MrKatsuWebAPI.DataAccess.Entities.Post", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("content");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime(6)")
                        .HasDefaultValue(new DateTime(2025, 5, 1, 16, 21, 30, 506, DateTimeKind.Utc).AddTicks(1411))
                        .HasColumnName("created_at");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint(1)")
                        .HasDefaultValue(false)
                        .HasColumnName("is_deleted");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("title");

                    b.Property<DateTime>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime(6)")
                        .HasDefaultValue(new DateTime(2025, 5, 1, 16, 21, 30, 506, DateTimeKind.Utc).AddTicks(2840))
                        .HasColumnName("updated_at");

                    b.Property<int>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("user_id");

                    b.HasKey("Id");

                    b.HasIndex("IsDeleted")
                        .HasDatabaseName("IX_Posts_IsDeleted");

                    b.HasIndex("UpdatedAt")
                        .HasDatabaseName("IX_Posts_UpdatedAt");

                    b.HasIndex("UserId")
                        .HasDatabaseName("IX_Posts_UserId");

                    b.ToTable("posts", (string)null);
                });

            modelBuilder.Entity("MrKatsuWebAPI.DataAccess.Entities.Reaction", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("content");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime(6)")
                        .HasDefaultValue(new DateTime(2025, 5, 1, 16, 21, 30, 507, DateTimeKind.Utc).AddTicks(4109))
                        .HasColumnName("created_at");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint(1)")
                        .HasDefaultValue(false)
                        .HasColumnName("is_deleted");

                    b.Property<int>("ModId")
                        .HasColumnType("int")
                        .HasColumnName("mod_id");

                    b.Property<DateTime>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime(6)")
                        .HasDefaultValue(new DateTime(2025, 5, 1, 16, 21, 30, 507, DateTimeKind.Utc).AddTicks(5415))
                        .HasColumnName("updated_at");

                    b.Property<int>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("user_id");

                    b.HasKey("Id");

                    b.HasIndex("ModId");

                    b.HasIndex("UpdatedAt")
                        .HasDatabaseName("IX_Reactions_UpdatedAt");

                    b.HasIndex("UserId")
                        .HasDatabaseName("IX_Reactions_UserId");

                    b.ToTable("reactions", (string)null);
                });

            modelBuilder.Entity("MrKatsuWebAPI.DataAccess.Entities.Reply", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("content");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime(6)")
                        .HasDefaultValue(new DateTime(2025, 5, 1, 16, 21, 30, 508, DateTimeKind.Utc).AddTicks(7822))
                        .HasColumnName("created_at");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint(1)")
                        .HasDefaultValue(false)
                        .HasColumnName("is_deleted");

                    b.Property<int?>("ParentId")
                        .HasColumnType("int")
                        .HasColumnName("parent_id");

                    b.Property<int>("PostId")
                        .HasColumnType("int")
                        .HasColumnName("post_id");

                    b.Property<DateTime>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime(6)")
                        .HasDefaultValue(new DateTime(2025, 5, 1, 16, 21, 30, 508, DateTimeKind.Utc).AddTicks(9042))
                        .HasColumnName("updated_at");

                    b.Property<int>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("user_id");

                    b.HasKey("Id");

                    b.HasIndex("IsDeleted")
                        .HasDatabaseName("IX_Replies_IsDeleted");

                    b.HasIndex("ParentId");

                    b.HasIndex("PostId")
                        .HasDatabaseName("IX_Replies_PostId");

                    b.HasIndex("UpdatedAt")
                        .HasDatabaseName("IX_Replies_UpdatedAt");

                    b.HasIndex("UserId")
                        .HasDatabaseName("IX_Replies_UserId");

                    b.ToTable("replies", (string)null);
                });

            modelBuilder.Entity("MrKatsuWebAPI.DataAccess.Entities.Url", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime(6)")
                        .HasDefaultValue(new DateTime(2025, 5, 1, 16, 21, 30, 510, DateTimeKind.Utc).AddTicks(712))
                        .HasColumnName("created_at");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint(1)")
                        .HasDefaultValue(false)
                        .HasColumnName("is_deleted");

                    b.Property<int>("ModId")
                        .HasColumnType("int")
                        .HasColumnName("mod_id");

                    b.Property<DateTime>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime(6)")
                        .HasDefaultValue(new DateTime(2025, 5, 1, 16, 21, 30, 510, DateTimeKind.Utc).AddTicks(1977))
                        .HasColumnName("updated_at");

                    b.Property<string>("UrlString")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("url_string");

                    b.HasKey("Id");

                    b.HasIndex("ModId");

                    b.ToTable("urls", (string)null);
                });

            modelBuilder.Entity("MrKatsuWebAPI.DataAccess.Entities.Mod", b =>
                {
                    b.HasOne("MrKatsuWebAPI.DataAccess.Entities.Category", "Category")
                        .WithMany("Mods")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MrKatsuWebAPI.DataAccess.Entities.AppUser", "User")
                        .WithMany("Mods")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");

                    b.Navigation("User");
                });

            modelBuilder.Entity("MrKatsuWebAPI.DataAccess.Entities.Post", b =>
                {
                    b.HasOne("MrKatsuWebAPI.DataAccess.Entities.AppUser", "User")
                        .WithMany("Posts")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("MrKatsuWebAPI.DataAccess.Entities.Reaction", b =>
                {
                    b.HasOne("MrKatsuWebAPI.DataAccess.Entities.Mod", "Mod")
                        .WithMany("Reactions")
                        .HasForeignKey("ModId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MrKatsuWebAPI.DataAccess.Entities.AppUser", "User")
                        .WithMany("Reactions")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Mod");

                    b.Navigation("User");
                });

            modelBuilder.Entity("MrKatsuWebAPI.DataAccess.Entities.Reply", b =>
                {
                    b.HasOne("MrKatsuWebAPI.DataAccess.Entities.Reply", "Parent")
                        .WithMany("Children")
                        .HasForeignKey("ParentId");

                    b.HasOne("MrKatsuWebAPI.DataAccess.Entities.Post", "Post")
                        .WithMany("Replies")
                        .HasForeignKey("PostId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MrKatsuWebAPI.DataAccess.Entities.AppUser", "User")
                        .WithMany("Replies")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Parent");

                    b.Navigation("Post");

                    b.Navigation("User");
                });

            modelBuilder.Entity("MrKatsuWebAPI.DataAccess.Entities.Url", b =>
                {
                    b.HasOne("MrKatsuWebAPI.DataAccess.Entities.Mod", "Mod")
                        .WithMany("Urls")
                        .HasForeignKey("ModId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Mod");
                });

            modelBuilder.Entity("MrKatsuWebAPI.DataAccess.Entities.AppUser", b =>
                {
                    b.Navigation("Mods");

                    b.Navigation("Posts");

                    b.Navigation("Reactions");

                    b.Navigation("Replies");
                });

            modelBuilder.Entity("MrKatsuWebAPI.DataAccess.Entities.Category", b =>
                {
                    b.Navigation("Mods");
                });

            modelBuilder.Entity("MrKatsuWebAPI.DataAccess.Entities.Mod", b =>
                {
                    b.Navigation("Reactions");

                    b.Navigation("Urls");
                });

            modelBuilder.Entity("MrKatsuWebAPI.DataAccess.Entities.Post", b =>
                {
                    b.Navigation("Replies");
                });

            modelBuilder.Entity("MrKatsuWebAPI.DataAccess.Entities.Reply", b =>
                {
                    b.Navigation("Children");
                });
#pragma warning restore 612, 618
        }
    }
}
