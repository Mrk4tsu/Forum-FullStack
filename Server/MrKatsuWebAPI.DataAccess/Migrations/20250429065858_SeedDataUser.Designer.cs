// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using MrKatsuWebAPI.DataAccess;

#nullable disable

namespace MrKatsuWebAPI.DataAccess.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20250429065858_SeedDataUser")]
    partial class SeedDataUser
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.15")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            MySqlModelBuilderExtensions.AutoIncrementColumns(modelBuilder);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("longtext");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("longtext");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("role_claims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("longtext");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("longtext");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("user_claims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<int>", b =>
                {
                    b.Property<int>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("UserId"));

                    b.Property<string>("LoginProvider")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("longtext");

                    b.Property<string>("ProviderKey")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("UserId");

                    b.ToTable("user_logins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<int>", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.HasKey("UserId", "RoleId");

                    b.ToTable("user_roles", (string)null);

                    b.HasData(
                        new
                        {
                            UserId = 1,
                            RoleId = 1
                        },
                        new
                        {
                            UserId = 2,
                            RoleId = 1
                        },
                        new
                        {
                            UserId = 3,
                            RoleId = 1
                        },
                        new
                        {
                            UserId = 4,
                            RoleId = 1
                        },
                        new
                        {
                            UserId = 5,
                            RoleId = 1
                        },
                        new
                        {
                            UserId = 6,
                            RoleId = 1
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<int>", b =>
                {
                    b.Property<int>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("UserId"));

                    b.Property<string>("LoginProvider")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Value")
                        .HasColumnType("longtext");

                    b.HasKey("UserId");

                    b.ToTable("user_tokens", (string)null);
                });

            modelBuilder.Entity("MrKatsuWebAPI.DataAccess.Entities.AppRole", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ConcurrencyStamp")
                        .HasColumnType("varchar(255)")
                        .HasColumnName("concurrency_stamp");

                    b.Property<string>("Description")
                        .HasColumnType("longtext")
                        .HasColumnName("description");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(255)")
                        .HasColumnName("name");

                    b.Property<string>("NormalizedName")
                        .IsRequired()
                        .HasColumnType("varchar(255)")
                        .HasColumnName("normalized_name");

                    b.HasKey("Id");

                    b.HasIndex("ConcurrencyStamp")
                        .HasDatabaseName("IX_Roles_ConcurrencyStamp");

                    b.HasIndex("Name")
                        .IsUnique()
                        .HasDatabaseName("IX_Roles_Name");

                    b.HasIndex("NormalizedName")
                        .HasDatabaseName("IX_Roles_NormalizedName");

                    b.ToTable("roles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Description = "Admintrator",
                            Name = "Admin",
                            NormalizedName = "ADMIN"
                        },
                        new
                        {
                            Id = 2,
                            Description = "Admintrator",
                            Name = "User",
                            NormalizedName = "USER"
                        });
                });

            modelBuilder.Entity("MrKatsuWebAPI.DataAccess.Entities.AppUser", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AccessFailedCount")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(0)
                        .HasColumnName("access_failed_count");

                    b.Property<string>("Avatar")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("longtext")
                        .HasDefaultValue("")
                        .HasColumnName("avatar");

                    b.Property<string>("ConcurrencyStamp")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("longtext")
                        .HasDefaultValue("")
                        .HasColumnName("concurrency_stamp");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("email");

                    b.Property<bool>("EmailConfirmed")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint(1)")
                        .HasDefaultValue(false)
                        .HasColumnName("email_confirmed");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint(1)")
                        .HasDefaultValue(false)
                        .HasColumnName("is_deleted");

                    b.Property<bool>("LockoutEnabled")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint(1)")
                        .HasDefaultValue(false)
                        .HasColumnName("lockout_enabled");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("lockout_end");

                    b.Property<string>("NormalizedEmail")
                        .HasColumnType("longtext")
                        .HasColumnName("normalized_email");

                    b.Property<string>("NormalizedUserName")
                        .HasColumnType("longtext")
                        .HasColumnName("normalized_username");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("password_hash");

                    b.Property<string>("PhoneNumber")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("longtext")
                        .HasDefaultValue("")
                        .HasColumnName("phone_number");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint(1)")
                        .HasDefaultValue(false)
                        .HasColumnName("phone_number_confirmed");

                    b.Property<string>("SecurityStamp")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("longtext")
                        .HasDefaultValue("")
                        .HasColumnName("security_stamp");

                    b.Property<DateTime>("TimeCreated")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("time_created");

                    b.Property<DateTime>("TimeUpdated")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("time_updated");

                    b.Property<bool>("TwoFactorEnabled")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint(1)")
                        .HasDefaultValue(false)
                        .HasColumnName("two_factor_enabled");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasColumnType("varchar(255)")
                        .HasColumnName("username");

                    b.HasKey("Id");

                    b.HasIndex("UserName")
                        .IsUnique()
                        .HasDatabaseName("IX_Users_UserName");

                    b.ToTable("users", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AccessFailedCount = 0,
                            Avatar = "assets/images/avatars/564.png",
                            ConcurrencyStamp = "9379c5b6-25fb-4b33-8c83-38cd87e09ba3",
                            Email = "admin@mail.com",
                            EmailConfirmed = false,
                            IsDeleted = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "ADMIN@EMAIL.COM",
                            NormalizedUserName = "ADMIN",
                            PasswordHash = "AQAAAAIAAYagAAAAEEVixtYh934ge2rJ8HUlnCo9yoCzYRESXaeGtq0g5RmbXS/CAkfCrHAM8ZPv1KjFPA==",
                            PhoneNumberConfirmed = false,
                            TimeCreated = new DateTime(2025, 4, 29, 13, 58, 56, 945, DateTimeKind.Local).AddTicks(1717),
                            TimeUpdated = new DateTime(2025, 4, 29, 13, 58, 56, 945, DateTimeKind.Local).AddTicks(1718),
                            TwoFactorEnabled = false,
                            UserName = "admin"
                        },
                        new
                        {
                            Id = 2,
                            AccessFailedCount = 0,
                            Avatar = "assets/images/avatars/vip/1475.png",
                            ConcurrencyStamp = "401c667e-1f8c-41a3-b115-8f24a3955dde",
                            Email = "hunghero@mail.com",
                            EmailConfirmed = false,
                            IsDeleted = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "HUNGHERO@MAIL.COM",
                            NormalizedUserName = "HUNGHERO",
                            PasswordHash = "AQAAAAIAAYagAAAAEMyHlGlrk3YZ84VB6uXjyNeZnLOGwZnOjNFKFcsST5bRHoKdZ2FnXOmjqw1ps9QGAw==",
                            PhoneNumberConfirmed = false,
                            TimeCreated = new DateTime(2025, 4, 29, 13, 58, 57, 32, DateTimeKind.Local).AddTicks(2469),
                            TimeUpdated = new DateTime(2025, 4, 29, 13, 58, 57, 32, DateTimeKind.Local).AddTicks(2473),
                            TwoFactorEnabled = false,
                            UserName = "hunghero"
                        },
                        new
                        {
                            Id = 3,
                            AccessFailedCount = 0,
                            Avatar = "assets/images/avatars/vip/1360.png",
                            ConcurrencyStamp = "5e37fcb8-0383-44b2-a9e6-adf09a9c11ee",
                            Email = "katsu@mail.com",
                            EmailConfirmed = false,
                            IsDeleted = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "KATSU@MAIL.COM",
                            NormalizedUserName = "KATSU",
                            PasswordHash = "AQAAAAIAAYagAAAAECdTj6Kx+c1alSoZQjn6c+OchC9TEvqkmMw3M+GgFjSFKrBnE5UK+YPrq6emLopczw==",
                            PhoneNumberConfirmed = false,
                            TimeCreated = new DateTime(2025, 4, 29, 13, 58, 57, 201, DateTimeKind.Local).AddTicks(6263),
                            TimeUpdated = new DateTime(2025, 4, 29, 13, 58, 57, 201, DateTimeKind.Local).AddTicks(6279),
                            TwoFactorEnabled = false,
                            UserName = "katsu"
                        },
                        new
                        {
                            Id = 4,
                            AccessFailedCount = 0,
                            Avatar = "assets/images/avatars/vip/1361.png",
                            ConcurrencyStamp = "8756e2c7-dd62-42a2-b5cd-ef766cc47bcb",
                            Email = "gatapchoi@email.com",
                            EmailConfirmed = false,
                            IsDeleted = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "GATAPCHOI@EMAIL.COM",
                            NormalizedUserName = "GATAPCHOI",
                            PasswordHash = "AQAAAAIAAYagAAAAEGoV8MB13ZJ+ZBo25qjYUr7VVIY851fp677z7AfS6+mvXHiW0mkqYyH46X3eyQL59w==",
                            PhoneNumberConfirmed = false,
                            TimeCreated = new DateTime(2025, 4, 29, 13, 58, 57, 290, DateTimeKind.Local).AddTicks(5877),
                            TimeUpdated = new DateTime(2025, 4, 29, 13, 58, 57, 290, DateTimeKind.Local).AddTicks(5900),
                            TwoFactorEnabled = false,
                            UserName = "gatapchoi"
                        },
                        new
                        {
                            Id = 5,
                            AccessFailedCount = 0,
                            Avatar = "assets/images/avatars/vip/1474.png",
                            ConcurrencyStamp = "cc6e3352-c109-433a-9e8a-d00440ab0f55",
                            Email = "manhhdc@email.com",
                            EmailConfirmed = false,
                            IsDeleted = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "MANHHDC@EMAIL.COM",
                            NormalizedUserName = "MANHHDC",
                            PasswordHash = "AQAAAAIAAYagAAAAEJZFzwNQL1u1f+aUQ1bVD7UCFy7VD8YTmrfBSIfR2xb4Nv75sTiNiDOu0jxpN/i4ig==",
                            PhoneNumberConfirmed = false,
                            TimeCreated = new DateTime(2025, 4, 29, 13, 58, 57, 374, DateTimeKind.Local).AddTicks(7652),
                            TimeUpdated = new DateTime(2025, 4, 29, 13, 58, 57, 374, DateTimeKind.Local).AddTicks(7684),
                            TwoFactorEnabled = false,
                            UserName = "manhhdc"
                        },
                        new
                        {
                            Id = 6,
                            AccessFailedCount = 0,
                            Avatar = "assets/images/avatars/1209.png",
                            ConcurrencyStamp = "5f51214c-4eca-4606-9038-0197ca2bfead",
                            Email = "ehvn@email.com",
                            EmailConfirmed = false,
                            IsDeleted = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "ehvn@email.com",
                            NormalizedUserName = "EHVN",
                            PasswordHash = "AQAAAAIAAYagAAAAEAvGMgWp0YK7u/MS1EDGLmS5TfGn6qAwzengORhAvMjTdLgBocZRlY4cAltRZPbOmA==",
                            PhoneNumberConfirmed = false,
                            TimeCreated = new DateTime(2025, 4, 29, 13, 58, 57, 460, DateTimeKind.Local).AddTicks(7167),
                            TimeUpdated = new DateTime(2025, 4, 29, 13, 58, 57, 460, DateTimeKind.Local).AddTicks(7187),
                            TwoFactorEnabled = false,
                            UserName = "ehvn"
                        });
                });

            modelBuilder.Entity("MrKatsuWebAPI.DataAccess.Entities.Post", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("content");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime(6)")
                        .HasDefaultValue(new DateTime(2025, 4, 29, 6, 58, 56, 942, DateTimeKind.Utc).AddTicks(3589))
                        .HasColumnName("created_at");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint(1)")
                        .HasDefaultValue(false)
                        .HasColumnName("is_deleted");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("title");

                    b.Property<DateTime>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime(6)")
                        .HasDefaultValue(new DateTime(2025, 4, 29, 6, 58, 56, 942, DateTimeKind.Utc).AddTicks(4437))
                        .HasColumnName("updated_at");

                    b.Property<int>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("user_id");

                    b.HasKey("Id");

                    b.HasIndex("IsDeleted")
                        .HasDatabaseName("IX_Posts_IsDeleted");

                    b.HasIndex("UpdatedAt")
                        .HasDatabaseName("IX_Posts_UpdatedAt");

                    b.HasIndex("UserId")
                        .HasDatabaseName("IX_Posts_UserId");

                    b.ToTable("posts", (string)null);
                });

            modelBuilder.Entity("MrKatsuWebAPI.DataAccess.Entities.Reply", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("content");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime(6)")
                        .HasDefaultValue(new DateTime(2025, 4, 29, 6, 58, 56, 943, DateTimeKind.Utc).AddTicks(9129))
                        .HasColumnName("created_at");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint(1)")
                        .HasDefaultValue(false)
                        .HasColumnName("is_deleted");

                    b.Property<int?>("ParentId")
                        .HasColumnType("int")
                        .HasColumnName("parent_id");

                    b.Property<int>("PostId")
                        .HasColumnType("int")
                        .HasColumnName("post_id");

                    b.Property<DateTime>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime(6)")
                        .HasDefaultValue(new DateTime(2025, 4, 29, 6, 58, 56, 944, DateTimeKind.Utc).AddTicks(65))
                        .HasColumnName("updated_at");

                    b.Property<int>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("user_id");

                    b.HasKey("Id");

                    b.HasIndex("IsDeleted")
                        .HasDatabaseName("IX_Replies_IsDeleted");

                    b.HasIndex("ParentId");

                    b.HasIndex("PostId")
                        .HasDatabaseName("IX_Replies_PostId");

                    b.HasIndex("UpdatedAt")
                        .HasDatabaseName("IX_Replies_UpdatedAt");

                    b.HasIndex("UserId")
                        .HasDatabaseName("IX_Replies_UserId");

                    b.ToTable("replies", (string)null);
                });

            modelBuilder.Entity("MrKatsuWebAPI.DataAccess.Entities.Post", b =>
                {
                    b.HasOne("MrKatsuWebAPI.DataAccess.Entities.AppUser", "User")
                        .WithMany("Posts")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("MrKatsuWebAPI.DataAccess.Entities.Reply", b =>
                {
                    b.HasOne("MrKatsuWebAPI.DataAccess.Entities.Reply", "Parent")
                        .WithMany("Children")
                        .HasForeignKey("ParentId");

                    b.HasOne("MrKatsuWebAPI.DataAccess.Entities.Post", "Post")
                        .WithMany("Replies")
                        .HasForeignKey("PostId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MrKatsuWebAPI.DataAccess.Entities.AppUser", "User")
                        .WithMany("Replies")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Parent");

                    b.Navigation("Post");

                    b.Navigation("User");
                });

            modelBuilder.Entity("MrKatsuWebAPI.DataAccess.Entities.AppUser", b =>
                {
                    b.Navigation("Posts");

                    b.Navigation("Replies");
                });

            modelBuilder.Entity("MrKatsuWebAPI.DataAccess.Entities.Post", b =>
                {
                    b.Navigation("Replies");
                });

            modelBuilder.Entity("MrKatsuWebAPI.DataAccess.Entities.Reply", b =>
                {
                    b.Navigation("Children");
                });
#pragma warning restore 612, 618
        }
    }
}
