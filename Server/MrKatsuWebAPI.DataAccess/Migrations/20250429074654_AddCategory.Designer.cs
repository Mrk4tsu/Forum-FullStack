// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using MrKatsuWebAPI.DataAccess;

#nullable disable

namespace MrKatsuWebAPI.DataAccess.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20250429074654_AddCategory")]
    partial class AddCategory
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.15")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            MySqlModelBuilderExtensions.AutoIncrementColumns(modelBuilder);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("longtext");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("longtext");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("role_claims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("longtext");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("longtext");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("user_claims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<int>", b =>
                {
                    b.Property<int>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("UserId"));

                    b.Property<string>("LoginProvider")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("longtext");

                    b.Property<string>("ProviderKey")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("UserId");

                    b.ToTable("user_logins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<int>", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.HasKey("UserId", "RoleId");

                    b.ToTable("user_roles", (string)null);

                    b.HasData(
                        new
                        {
                            UserId = 1,
                            RoleId = 1
                        },
                        new
                        {
                            UserId = 2,
                            RoleId = 1
                        },
                        new
                        {
                            UserId = 3,
                            RoleId = 1
                        },
                        new
                        {
                            UserId = 4,
                            RoleId = 1
                        },
                        new
                        {
                            UserId = 5,
                            RoleId = 1
                        },
                        new
                        {
                            UserId = 6,
                            RoleId = 1
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<int>", b =>
                {
                    b.Property<int>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("UserId"));

                    b.Property<string>("LoginProvider")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Value")
                        .HasColumnType("longtext");

                    b.HasKey("UserId");

                    b.ToTable("user_tokens", (string)null);
                });

            modelBuilder.Entity("MrKatsuWebAPI.DataAccess.Entities.AppRole", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ConcurrencyStamp")
                        .HasColumnType("varchar(255)")
                        .HasColumnName("concurrency_stamp");

                    b.Property<string>("Description")
                        .HasColumnType("longtext")
                        .HasColumnName("description");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(255)")
                        .HasColumnName("name");

                    b.Property<string>("NormalizedName")
                        .IsRequired()
                        .HasColumnType("varchar(255)")
                        .HasColumnName("normalized_name");

                    b.HasKey("Id");

                    b.HasIndex("ConcurrencyStamp")
                        .HasDatabaseName("IX_Roles_ConcurrencyStamp");

                    b.HasIndex("Name")
                        .IsUnique()
                        .HasDatabaseName("IX_Roles_Name");

                    b.HasIndex("NormalizedName")
                        .HasDatabaseName("IX_Roles_NormalizedName");

                    b.ToTable("roles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Description = "Admintrator",
                            Name = "Admin",
                            NormalizedName = "ADMIN"
                        },
                        new
                        {
                            Id = 2,
                            Description = "Admintrator",
                            Name = "User",
                            NormalizedName = "USER"
                        });
                });

            modelBuilder.Entity("MrKatsuWebAPI.DataAccess.Entities.AppUser", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AccessFailedCount")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(0)
                        .HasColumnName("access_failed_count");

                    b.Property<string>("Avatar")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("longtext")
                        .HasDefaultValue("")
                        .HasColumnName("avatar");

                    b.Property<string>("ConcurrencyStamp")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("longtext")
                        .HasDefaultValue("")
                        .HasColumnName("concurrency_stamp");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("email");

                    b.Property<bool>("EmailConfirmed")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint(1)")
                        .HasDefaultValue(false)
                        .HasColumnName("email_confirmed");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint(1)")
                        .HasDefaultValue(false)
                        .HasColumnName("is_deleted");

                    b.Property<bool>("LockoutEnabled")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint(1)")
                        .HasDefaultValue(false)
                        .HasColumnName("lockout_enabled");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("lockout_end");

                    b.Property<string>("NormalizedEmail")
                        .HasColumnType("longtext")
                        .HasColumnName("normalized_email");

                    b.Property<string>("NormalizedUserName")
                        .HasColumnType("longtext")
                        .HasColumnName("normalized_username");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("password_hash");

                    b.Property<string>("PhoneNumber")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("longtext")
                        .HasDefaultValue("")
                        .HasColumnName("phone_number");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint(1)")
                        .HasDefaultValue(false)
                        .HasColumnName("phone_number_confirmed");

                    b.Property<string>("SecurityStamp")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("longtext")
                        .HasDefaultValue("")
                        .HasColumnName("security_stamp");

                    b.Property<DateTime>("TimeCreated")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("time_created");

                    b.Property<DateTime>("TimeUpdated")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("time_updated");

                    b.Property<bool>("TwoFactorEnabled")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint(1)")
                        .HasDefaultValue(false)
                        .HasColumnName("two_factor_enabled");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasColumnType("varchar(255)")
                        .HasColumnName("username");

                    b.HasKey("Id");

                    b.HasIndex("UserName")
                        .IsUnique()
                        .HasDatabaseName("IX_Users_UserName");

                    b.ToTable("users", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AccessFailedCount = 0,
                            Avatar = "assets/images/avatars/564.png",
                            ConcurrencyStamp = "7f176aa5-ce64-43af-b821-32dbc503360c",
                            Email = "admin@mail.com",
                            EmailConfirmed = false,
                            IsDeleted = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "ADMIN@EMAIL.COM",
                            NormalizedUserName = "ADMIN",
                            PasswordHash = "AQAAAAIAAYagAAAAEAmVpK57lECa0wh+r2HMDlTF6KLOJlP9K5K4EPRyKQpa7ez4/FRWo9pRHMglOr+9yw==",
                            PhoneNumberConfirmed = false,
                            TimeCreated = new DateTime(2025, 4, 29, 14, 46, 52, 936, DateTimeKind.Local).AddTicks(4219),
                            TimeUpdated = new DateTime(2025, 4, 29, 14, 46, 52, 936, DateTimeKind.Local).AddTicks(4220),
                            TwoFactorEnabled = false,
                            UserName = "admin"
                        },
                        new
                        {
                            Id = 2,
                            AccessFailedCount = 0,
                            Avatar = "assets/images/avatars/vip/1475.png",
                            ConcurrencyStamp = "5dc0b7fb-5957-4c65-bd6c-cbf5b90cbabb",
                            Email = "hunghero@mail.com",
                            EmailConfirmed = false,
                            IsDeleted = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "HUNGHERO@MAIL.COM",
                            NormalizedUserName = "HUNGHERO",
                            PasswordHash = "AQAAAAIAAYagAAAAEIzWPw2IbRzkr3AOre1Eo5128Wa7cVURI0kMxdgwgEO3U2xtnc0UwzqesQAczOTr6A==",
                            PhoneNumberConfirmed = false,
                            TimeCreated = new DateTime(2025, 4, 29, 14, 46, 53, 25, DateTimeKind.Local).AddTicks(8579),
                            TimeUpdated = new DateTime(2025, 4, 29, 14, 46, 53, 25, DateTimeKind.Local).AddTicks(8580),
                            TwoFactorEnabled = false,
                            UserName = "hunghero"
                        },
                        new
                        {
                            Id = 3,
                            AccessFailedCount = 0,
                            Avatar = "assets/images/avatars/vip/1360.png",
                            ConcurrencyStamp = "090debc8-c7f6-472e-acaa-5fc31d0115f5",
                            Email = "katsu@mail.com",
                            EmailConfirmed = false,
                            IsDeleted = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "KATSU@MAIL.COM",
                            NormalizedUserName = "KATSU",
                            PasswordHash = "AQAAAAIAAYagAAAAEKy3b89+j7rkcv+WtYaFqtl+NNXGdeYXkSlhm0rWrQjLNvo9L9rdZtaTE/ep2W6VwQ==",
                            PhoneNumberConfirmed = false,
                            TimeCreated = new DateTime(2025, 4, 29, 14, 46, 53, 186, DateTimeKind.Local).AddTicks(1281),
                            TimeUpdated = new DateTime(2025, 4, 29, 14, 46, 53, 186, DateTimeKind.Local).AddTicks(1299),
                            TwoFactorEnabled = false,
                            UserName = "katsu"
                        },
                        new
                        {
                            Id = 4,
                            AccessFailedCount = 0,
                            Avatar = "assets/images/avatars/vip/1361.png",
                            ConcurrencyStamp = "df0cb9b3-54cf-4e73-b684-68f024be7730",
                            Email = "gatapchoi@email.com",
                            EmailConfirmed = false,
                            IsDeleted = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "GATAPCHOI@EMAIL.COM",
                            NormalizedUserName = "GATAPCHOI",
                            PasswordHash = "AQAAAAIAAYagAAAAEFGPsPBu4Ky0FRhrwWkwv99Lv4wbeijVpEQPlMclOQNsku4LvufIhFyHaD8Zq76uZg==",
                            PhoneNumberConfirmed = false,
                            TimeCreated = new DateTime(2025, 4, 29, 14, 46, 53, 265, DateTimeKind.Local).AddTicks(6920),
                            TimeUpdated = new DateTime(2025, 4, 29, 14, 46, 53, 265, DateTimeKind.Local).AddTicks(6941),
                            TwoFactorEnabled = false,
                            UserName = "gatapchoi"
                        },
                        new
                        {
                            Id = 5,
                            AccessFailedCount = 0,
                            Avatar = "assets/images/avatars/vip/1474.png",
                            ConcurrencyStamp = "a3d0ea85-e459-4872-a042-6db50d8a5289",
                            Email = "manhhdc@email.com",
                            EmailConfirmed = false,
                            IsDeleted = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "MANHHDC@EMAIL.COM",
                            NormalizedUserName = "MANHHDC",
                            PasswordHash = "AQAAAAIAAYagAAAAEOWaxLkUz6a1F4he9nXVYMbG+W1Qm6fmPHz90vTOSz+0WKwlFEi1sfzvG9LvNdWTfA==",
                            PhoneNumberConfirmed = false,
                            TimeCreated = new DateTime(2025, 4, 29, 14, 46, 53, 345, DateTimeKind.Local).AddTicks(5861),
                            TimeUpdated = new DateTime(2025, 4, 29, 14, 46, 53, 345, DateTimeKind.Local).AddTicks(5876),
                            TwoFactorEnabled = false,
                            UserName = "manhhdc"
                        },
                        new
                        {
                            Id = 6,
                            AccessFailedCount = 0,
                            Avatar = "assets/images/avatars/1209.png",
                            ConcurrencyStamp = "aa8e85bd-7a8f-4081-8230-bd2d67a828dd",
                            Email = "ehvn@email.com",
                            EmailConfirmed = false,
                            IsDeleted = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "ehvn@email.com",
                            NormalizedUserName = "EHVN",
                            PasswordHash = "AQAAAAIAAYagAAAAEJpinvcYmRVsFoVHmg1kS3GKcuagSI7uFpaN9Uc8QYXog44p+pcQK0co9bbd+L2fIA==",
                            PhoneNumberConfirmed = false,
                            TimeCreated = new DateTime(2025, 4, 29, 14, 46, 53, 421, DateTimeKind.Local).AddTicks(3834),
                            TimeUpdated = new DateTime(2025, 4, 29, 14, 46, 53, 421, DateTimeKind.Local).AddTicks(3851),
                            TwoFactorEnabled = false,
                            UserName = "ehvn"
                        });
                });

            modelBuilder.Entity("MrKatsuWebAPI.DataAccess.Entities.Category", b =>
                {
                    b.Property<byte>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint unsigned")
                        .HasColumnName("id");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<byte>("Id"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("varchar(150)")
                        .HasColumnName("description");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("name");

                    b.HasKey("Id");

                    b.ToTable("categories", (string)null);

                    b.HasData(
                        new
                        {
                            Id = (byte)1,
                            Description = "Chi tiết danh mục",
                            Name = "android"
                        },
                        new
                        {
                            Id = (byte)2,
                            Description = "Chi tiết danh mục",
                            Name = "pc"
                        },
                        new
                        {
                            Id = (byte)3,
                            Description = "Chi tiết danh mục",
                            Name = "java"
                        },
                        new
                        {
                            Id = (byte)4,
                            Description = "Chi tiết danh mục",
                            Name = "ios"
                        });
                });

            modelBuilder.Entity("MrKatsuWebAPI.DataAccess.Entities.Mod", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<byte>("CategoryId")
                        .HasColumnType("tinyint unsigned")
                        .HasColumnName("category_id");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime(6)")
                        .HasDefaultValue(new DateTime(2025, 4, 29, 7, 46, 52, 931, DateTimeKind.Utc).AddTicks(3839))
                        .HasColumnName("created_at");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("description");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint(1)")
                        .HasDefaultValue(false)
                        .HasColumnName("is_deleted");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("name");

                    b.Property<DateTime>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime(6)")
                        .HasDefaultValue(new DateTime(2025, 4, 29, 7, 46, 52, 931, DateTimeKind.Utc).AddTicks(4881))
                        .HasColumnName("updated_at");

                    b.Property<int>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("user_id");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.HasIndex("UserId");

                    b.ToTable("mods", (string)null);
                });

            modelBuilder.Entity("MrKatsuWebAPI.DataAccess.Entities.Post", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("content");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime(6)")
                        .HasDefaultValue(new DateTime(2025, 4, 29, 7, 46, 52, 932, DateTimeKind.Utc).AddTicks(3012))
                        .HasColumnName("created_at");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint(1)")
                        .HasDefaultValue(false)
                        .HasColumnName("is_deleted");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("title");

                    b.Property<DateTime>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime(6)")
                        .HasDefaultValue(new DateTime(2025, 4, 29, 7, 46, 52, 932, DateTimeKind.Utc).AddTicks(3978))
                        .HasColumnName("updated_at");

                    b.Property<int>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("user_id");

                    b.HasKey("Id");

                    b.HasIndex("IsDeleted")
                        .HasDatabaseName("IX_Posts_IsDeleted");

                    b.HasIndex("UpdatedAt")
                        .HasDatabaseName("IX_Posts_UpdatedAt");

                    b.HasIndex("UserId")
                        .HasDatabaseName("IX_Posts_UserId");

                    b.ToTable("posts", (string)null);
                });

            modelBuilder.Entity("MrKatsuWebAPI.DataAccess.Entities.Reaction", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("content");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime(6)")
                        .HasDefaultValue(new DateTime(2025, 4, 29, 7, 46, 52, 933, DateTimeKind.Utc).AddTicks(3194))
                        .HasColumnName("created_at");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint(1)")
                        .HasDefaultValue(false)
                        .HasColumnName("is_deleted");

                    b.Property<int>("ModId")
                        .HasColumnType("int")
                        .HasColumnName("mod_id");

                    b.Property<DateTime>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime(6)")
                        .HasDefaultValue(new DateTime(2025, 4, 29, 7, 46, 52, 933, DateTimeKind.Utc).AddTicks(4304))
                        .HasColumnName("updated_at");

                    b.Property<int>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("user_id");

                    b.HasKey("Id");

                    b.HasIndex("ModId");

                    b.HasIndex("UpdatedAt")
                        .HasDatabaseName("IX_Reactions_UpdatedAt");

                    b.HasIndex("UserId")
                        .HasDatabaseName("IX_Reactions_UserId");

                    b.ToTable("reactions", (string)null);
                });

            modelBuilder.Entity("MrKatsuWebAPI.DataAccess.Entities.Reply", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("content");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime(6)")
                        .HasDefaultValue(new DateTime(2025, 4, 29, 7, 46, 52, 934, DateTimeKind.Utc).AddTicks(3573))
                        .HasColumnName("created_at");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint(1)")
                        .HasDefaultValue(false)
                        .HasColumnName("is_deleted");

                    b.Property<int?>("ParentId")
                        .HasColumnType("int")
                        .HasColumnName("parent_id");

                    b.Property<int>("PostId")
                        .HasColumnType("int")
                        .HasColumnName("post_id");

                    b.Property<DateTime>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime(6)")
                        .HasDefaultValue(new DateTime(2025, 4, 29, 7, 46, 52, 934, DateTimeKind.Utc).AddTicks(4580))
                        .HasColumnName("updated_at");

                    b.Property<int>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("user_id");

                    b.HasKey("Id");

                    b.HasIndex("IsDeleted")
                        .HasDatabaseName("IX_Replies_IsDeleted");

                    b.HasIndex("ParentId");

                    b.HasIndex("PostId")
                        .HasDatabaseName("IX_Replies_PostId");

                    b.HasIndex("UpdatedAt")
                        .HasDatabaseName("IX_Replies_UpdatedAt");

                    b.HasIndex("UserId")
                        .HasDatabaseName("IX_Replies_UserId");

                    b.ToTable("replies", (string)null);
                });

            modelBuilder.Entity("MrKatsuWebAPI.DataAccess.Entities.Url", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime(6)")
                        .HasDefaultValue(new DateTime(2025, 4, 29, 7, 46, 52, 935, DateTimeKind.Utc).AddTicks(4590))
                        .HasColumnName("created_at");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint(1)")
                        .HasDefaultValue(false)
                        .HasColumnName("is_deleted");

                    b.Property<int>("ModId")
                        .HasColumnType("int")
                        .HasColumnName("mod_id");

                    b.Property<DateTime>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime(6)")
                        .HasDefaultValue(new DateTime(2025, 4, 29, 7, 46, 52, 935, DateTimeKind.Utc).AddTicks(5607))
                        .HasColumnName("updated_at");

                    b.Property<string>("UrlString")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("url_string");

                    b.HasKey("Id");

                    b.HasIndex("ModId");

                    b.ToTable("urls", (string)null);
                });

            modelBuilder.Entity("MrKatsuWebAPI.DataAccess.Entities.Mod", b =>
                {
                    b.HasOne("MrKatsuWebAPI.DataAccess.Entities.Category", "Category")
                        .WithMany("Mods")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MrKatsuWebAPI.DataAccess.Entities.AppUser", "User")
                        .WithMany("Mods")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");

                    b.Navigation("User");
                });

            modelBuilder.Entity("MrKatsuWebAPI.DataAccess.Entities.Post", b =>
                {
                    b.HasOne("MrKatsuWebAPI.DataAccess.Entities.AppUser", "User")
                        .WithMany("Posts")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("MrKatsuWebAPI.DataAccess.Entities.Reaction", b =>
                {
                    b.HasOne("MrKatsuWebAPI.DataAccess.Entities.Mod", "Mod")
                        .WithMany("Reactions")
                        .HasForeignKey("ModId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MrKatsuWebAPI.DataAccess.Entities.AppUser", "User")
                        .WithMany("Reactions")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Mod");

                    b.Navigation("User");
                });

            modelBuilder.Entity("MrKatsuWebAPI.DataAccess.Entities.Reply", b =>
                {
                    b.HasOne("MrKatsuWebAPI.DataAccess.Entities.Reply", "Parent")
                        .WithMany("Children")
                        .HasForeignKey("ParentId");

                    b.HasOne("MrKatsuWebAPI.DataAccess.Entities.Post", "Post")
                        .WithMany("Replies")
                        .HasForeignKey("PostId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MrKatsuWebAPI.DataAccess.Entities.AppUser", "User")
                        .WithMany("Replies")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Parent");

                    b.Navigation("Post");

                    b.Navigation("User");
                });

            modelBuilder.Entity("MrKatsuWebAPI.DataAccess.Entities.Url", b =>
                {
                    b.HasOne("MrKatsuWebAPI.DataAccess.Entities.Mod", "Mod")
                        .WithMany("Urls")
                        .HasForeignKey("ModId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Mod");
                });

            modelBuilder.Entity("MrKatsuWebAPI.DataAccess.Entities.AppUser", b =>
                {
                    b.Navigation("Mods");

                    b.Navigation("Posts");

                    b.Navigation("Reactions");

                    b.Navigation("Replies");
                });

            modelBuilder.Entity("MrKatsuWebAPI.DataAccess.Entities.Category", b =>
                {
                    b.Navigation("Mods");
                });

            modelBuilder.Entity("MrKatsuWebAPI.DataAccess.Entities.Mod", b =>
                {
                    b.Navigation("Reactions");

                    b.Navigation("Urls");
                });

            modelBuilder.Entity("MrKatsuWebAPI.DataAccess.Entities.Post", b =>
                {
                    b.Navigation("Replies");
                });

            modelBuilder.Entity("MrKatsuWebAPI.DataAccess.Entities.Reply", b =>
                {
                    b.Navigation("Children");
                });
#pragma warning restore 612, 618
        }
    }
}
